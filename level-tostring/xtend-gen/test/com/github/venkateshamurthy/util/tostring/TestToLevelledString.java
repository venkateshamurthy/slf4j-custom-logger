package com.github.venkateshamurthy.util.tostring;

import java.util.List;
import org.eclipse.xtend.core.compiler.batch.XtendCompilerTester;
import org.eclipse.xtend.lib.macro.services.Problem;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.util.IAcceptor;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.testng.Assert;
import org.testng.annotations.Test;

@SuppressWarnings("all")
public class TestToLevelledString {
  @Extension
  private XtendCompilerTester compilerTester = XtendCompilerTester.newXtendCompilerTester(this.getClass().getClassLoader());
  
  @Test
  public void testToLevelledString() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.github.venkateshamurthy.util.tostring.xtend");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Date");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.append("import org.apache.commons.lang3.builder.ToStringBuilder");
    _builder.newLine();
    _builder.append("import com.github.venkateshamurthy.util.logging.LevelOfDetail");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@ToLevelledStringAnnotation(brief=#[\'name\',\'dateOfBirth\'], medium=#[\'name\',\'dateOfBirth\',\'salary\'])");
    _builder.newLine();
    _builder.append("class Employee {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val protected Date dateOfBirth");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val protected String name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val protected double salary");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("new(Date dateOfBirth, String name, double salary){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.name = name");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.dateOfBirth = dateOfBirth");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.salary = salary");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def getDateOfBirth(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("dateOfBirth");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def getName(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def getSalary(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("salary");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("override String toString(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return ToStringBuilder.reflectionToString(this)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("@ToLevelledStringAnnotation(medium=#[\'reportees\'])");
    _builder.newLine();
    _builder.append("class Employer extends Employee{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val List<Employee> reportees = new ArrayList<Employee>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("new(Date dateOfBirth, String name, double salary) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(dateOfBirth, name, salary)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("new(Date dateOfBirth, String name, double salary, Employee... employees) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(dateOfBirth, name, salary)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("reportees.addAll(employees);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def addReportee(Employee employee){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("reportees.add(employee)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def getReportees(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("reportees");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Examples {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static void main(String[] args){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val Employee a = new Employee(new Date(70,6,24),\"Aemployee\", 2500000d)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val Employee b = new Employee(new Date(75,9,20),\"Bemployee\", 2500000d)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val Employer m = new Employer(new Date(65,1,1),\"Manager\", 5000000d,a,b)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(\'Trying to print something:\'+m.toString(LevelOfDetail.MEDIUM))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final IAcceptor<XtendCompilerTester.CompilationResult> _function = new IAcceptor<XtendCompilerTester.CompilationResult>() {
      @Override
      public void accept(final XtendCompilerTester.CompilationResult it) {
        List<? extends Problem> _allProblems = it.getAllProblems();
        boolean _isEmpty = _allProblems.isEmpty();
        Assert.assertTrue(_isEmpty);
        List<? extends Problem> _allProblems_1 = it.getAllProblems();
        for (final Problem problem : _allProblems_1) {
          String _message = problem.getMessage();
          InputOutput.<String>println(_message);
        }
      }
    };
    this.compilerTester.compile(_builder, _function);
  }
}
